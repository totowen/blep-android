package com.example.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table APP_RUN_CONFIG.
*/
public class AppRunConfigDao extends AbstractDao<AppRunConfig, Long> {

    public static final String TABLENAME = "APP_RUN_CONFIG";

    /**
     * Properties of entity AppRunConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Week = new Property(1, String.class, "week", false, "WEEK");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property AppIcon = new Property(4, String.class, "appIcon", false, "APP_ICON");
        public final static Property PackName = new Property(5, String.class, "packName", false, "PACK_NAME");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
    };


    public AppRunConfigDao(DaoConfig config) {
        super(config);
    }
    
    public AppRunConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_RUN_CONFIG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'WEEK' TEXT," + // 1: week
                "'TIME' TEXT," + // 2: time
                "'NAME' TEXT," + // 3: name
                "'APP_ICON' TEXT," + // 4: appIcon
                "'PACK_NAME' TEXT," + // 5: packName
                "'TYPE' TEXT);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_RUN_CONFIG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppRunConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(2, week);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String appIcon = entity.getAppIcon();
        if (appIcon != null) {
            stmt.bindString(5, appIcon);
        }
 
        String packName = entity.getPackName();
        if (packName != null) {
            stmt.bindString(6, packName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppRunConfig readEntity(Cursor cursor, int offset) {
        AppRunConfig entity = new AppRunConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // week
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appIcon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // packName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppRunConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeek(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPackName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppRunConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppRunConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
