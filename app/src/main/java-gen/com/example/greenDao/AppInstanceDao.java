package com.example.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table APP_INSTANCE.
*/
public class AppInstanceDao extends AbstractDao<AppInstance, String> {

    public static final String TABLENAME = "APP_INSTANCE";

    /**
     * Properties of entity AppInstance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InstallTime = new Property(0, java.util.Date.class, "installTime", false, "INSTALL_TIME");
        public final static Property Mac = new Property(1, String.class, "mac", false, "MAC");
        public final static Property AppPackageName = new Property(2, String.class, "appPackageName", true, "APP_PACKAGE_NAME");
    };

    private DaoSession daoSession;


    public AppInstanceDao(DaoConfig config) {
        super(config);
    }
    
    public AppInstanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_INSTANCE' (" + //
                "'INSTALL_TIME' INTEGER," + // 0: installTime
                "'MAC' TEXT," + // 1: mac
                "'APP_PACKAGE_NAME' TEXT PRIMARY KEY NOT NULL );"); // 2: appPackageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_INSTANCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppInstance entity) {
        stmt.clearBindings();
 
        java.util.Date installTime = entity.getInstallTime();
        if (installTime != null) {
            stmt.bindLong(1, installTime.getTime());
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(2, mac);
        }
 
        String appPackageName = entity.getAppPackageName();
        if (appPackageName != null) {
            stmt.bindString(3, appPackageName);
        }
    }

    @Override
    protected void attachEntity(AppInstance entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    /** @inheritdoc */
    @Override
    public AppInstance readEntity(Cursor cursor, int offset) {
        AppInstance entity = new AppInstance( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // installTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // appPackageName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppInstance entity, int offset) {
        entity.setInstallTime(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AppInstance entity, long rowId) {
        return entity.getAppPackageName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AppInstance entity) {
        if(entity != null) {
            return entity.getAppPackageName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
