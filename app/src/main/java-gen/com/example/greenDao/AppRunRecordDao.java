package com.example.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table APP_RUN_RECORD.
*/
public class AppRunRecordDao extends AbstractDao<AppRunRecord, Long> {

    public static final String TABLENAME = "APP_RUN_RECORD";

    /**
     * Properties of entity AppRunRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartTime = new Property(1, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property ExitTime = new Property(2, java.util.Date.class, "exitTime", false, "EXIT_TIME");
        public final static Property AppInstance = new Property(3, String.class, "appInstance", false, "APP_INSTANCE");
        public final static Property AppInstanceId = new Property(4, String.class, "appInstanceId", false, "APP_INSTANCE_ID");
        public final static Property RunTime = new Property(5, String.class, "runTime", false, "RUN_TIME");
        public final static Property AllRunNumber = new Property(6, Integer.class, "allRunNumber", false, "ALL_RUN_NUMBER");
        public final static Property AllRunDuration = new Property(7, Long.class, "allRunDuration", false, "ALL_RUN_DURATION");
        public final static Property AppInstancePackageName = new Property(8, String.class, "appInstancePackageName", false, "APP_INSTANCE_PACKAGE_NAME");
    };


    public AppRunRecordDao(DaoConfig config) {
        super(config);
    }
    
    public AppRunRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_RUN_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'START_TIME' INTEGER," + // 1: startTime
                "'EXIT_TIME' INTEGER," + // 2: exitTime
                "'APP_INSTANCE' TEXT," + // 3: appInstance
                "'APP_INSTANCE_ID' TEXT," + // 4: appInstanceId
                "'RUN_TIME' TEXT," + // 5: runTime
                "'ALL_RUN_NUMBER' INTEGER," + // 6: allRunNumber
                "'ALL_RUN_DURATION' INTEGER," + // 7: allRunDuration
                "'APP_INSTANCE_PACKAGE_NAME' TEXT);"); // 8: appInstancePackageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_RUN_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppRunRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime.getTime());
        }
 
        java.util.Date exitTime = entity.getExitTime();
        if (exitTime != null) {
            stmt.bindLong(3, exitTime.getTime());
        }
 
        String appInstance = entity.getAppInstance();
        if (appInstance != null) {
            stmt.bindString(4, appInstance);
        }
 
        String appInstanceId = entity.getAppInstanceId();
        if (appInstanceId != null) {
            stmt.bindString(5, appInstanceId);
        }
 
        String runTime = entity.getRunTime();
        if (runTime != null) {
            stmt.bindString(6, runTime);
        }
 
        Integer allRunNumber = entity.getAllRunNumber();
        if (allRunNumber != null) {
            stmt.bindLong(7, allRunNumber);
        }
 
        Long allRunDuration = entity.getAllRunDuration();
        if (allRunDuration != null) {
            stmt.bindLong(8, allRunDuration);
        }
 
        String appInstancePackageName = entity.getAppInstancePackageName();
        if (appInstancePackageName != null) {
            stmt.bindString(9, appInstancePackageName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppRunRecord readEntity(Cursor cursor, int offset) {
        AppRunRecord entity = new AppRunRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // startTime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // exitTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appInstance
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appInstanceId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // runTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // allRunNumber
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // allRunDuration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // appInstancePackageName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppRunRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setExitTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setAppInstance(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppInstanceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRunTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAllRunNumber(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAllRunDuration(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setAppInstancePackageName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppRunRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppRunRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
